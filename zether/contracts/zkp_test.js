a = eth.accounts[0]
web3.eth.defaultAccount = a;

// abi and bytecode generated from *.sol:
// > solc --bin --abi *.sol
var abi = [{"constant":true,"inputs":[{"name":"CLn","type":"bytes32[2]"},{"name":"CRn","type":"bytes32[2]"},{"name":"inL","type":"bytes32[2]"},{"name":"outL","type":"bytes32[2]"},{"name":"inOutR","type":"bytes32[2]"},{"name":"y","type":"bytes32[2]"},{"name":"yBar","type":"bytes32[2]"},{"name":"proof","type":"bytes"}],"name":"verifyTransfer","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"CLn","type":"bytes32[2]"},{"name":"CRn","type":"bytes32[2]"},{"name":"y","type":"bytes32[2]"},{"name":"bTransfer","type":"uint256"},{"name":"proof","type":"bytes"}],"name":"verifyBurn","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"}]

var bytecode = "0x608060405234801561001057600080fd5b50610701806100206000396000f3fe608060405234801561001057600080fd5b5060043610610053576000357c010000000000000000000000000000000000000000000000000000000090048063ea59a87f14610058578063f43fd09c14610130575b600080fd5b61011660048036036101e081101561006f57600080fd5b8101908080604001909192919290806040019091929192908060400190919291929080604001909192919290806040019091929192908060400190919291929080604001909192919290803590602001906401000000008111156100d257600080fd5b8201836020820111156100e457600080fd5b8035906020019184600183028401116401000000008311171561010657600080fd5b90919293919293905050506101ea565b604051808215151515815260200191505060405180910390f35b6101d0600480360361010081101561014757600080fd5b81019080806040019091929192908060400190919291929080604001909192919290803590602001909291908035906020019064010000000081111561018c57600080fd5b82018360208201111561019e57600080fd5b803590602001918460018302840111640100000000831117156101c057600080fd5b9091929391929390505050610496565b604051808215151515815260200191505060405180910390f35b600060606104398b600060028110151561020057fe5b60200201358c600160028110151561021457fe5b60200201358c600060028110151561022857fe5b60200201358d600160028110151561023c57fe5b60200201358d600060028110151561025057fe5b60200201358e600160028110151561026457fe5b60200201358e600060028110151561027857fe5b60200201358f600160028110151561028c57fe5b602002013560405160200180898152602001888152602001878152602001868152602001858152602001848152602001838152602001828152602001985050505050505050506040516020818303038152906040528860006002811015156102f057fe5b602002013589600160028110151561030457fe5b602002013589600060028110151561031857fe5b60200201358a600160028110151561032c57fe5b60200201358a600060028110151561034057fe5b60200201358b600160028110151561035457fe5b60200201356040516020018088805190602001908083835b602083101515610391578051825260208201915060208101905060208303925061036c565b6001836020036101000a03801982511681845116808217855250505050505090500187815260200186815260200185815260200184815260200183815260200182815260200197505050505050505060405160208183030381529060405285858080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050610603565b90506104436106b2565b602081611000846009600019fa151561045b57600080fd5b600181600060018110151561046c57fe5b6020020151141561048257600192505050610489565b6000925050505b9998505050505050505050565b600060606105a98860006002811015156104ac57fe5b60200201358960016002811015156104c057fe5b60200201358960006002811015156104d457fe5b60200201358a60016002811015156104e857fe5b60200201358a60006002811015156104fc57fe5b60200201358b600160028110151561051057fe5b60200201358b6040516020018088815260200187815260200186815260200185815260200184815260200183815260200182815260200197505050505050505060405160208183030381529060405285858080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050610603565b90506105b36106b2565b60208161100084600a600019fa15156105cb57600080fd5b60018160006001811015156105dc57fe5b602002015114156105f2576001925050506105f9565b6000925050505b9695505050505050565b6060600083519050600083518201905060006020601f87510181151561062557fe5b04905060006020601f87510181151561063a57fe5b04905060405183815260005b8381101561066d578060010160200289015181600101602002830152806001019050610646565b5060005b8281101561069a5780600101602002880151868260010160200201830152806001019050610671565b50836020018101604052809550505050505092915050565b60206040519081016040528060019060208202803883398082019150509050509056fea165627a7a72305820f16a380e00fb14e41f696dec782ff908b8d19f583fda979c23fdb268db880f830029"

var zkpContract = web3.eth.contract(abi);
var zkp = zkpContract.new({from:web3.eth.accounts[0], data: bytecode, gas: 0x47b760}, function(e, contract) {
	if (e) {
		console.log("err creating contract", e);
	} else {
		if (!contract.address) {
			console.log("Contract transaction send: TransactionHash: " + contract.transactionHash + " waiting to be mined...");
		} else {
			console.log("Contract mined! Address: " + contract.address);
			console.log(contract);
		}
	}
})
